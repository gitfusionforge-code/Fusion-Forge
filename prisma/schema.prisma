// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PcBuild {
  id                  Int       @id @default(autoincrement())
  name                String
  category            String
  buildType           String    @map("build_type")
  budgetRange         String    @map("budget_range")
  basePrice           Int       @map("base_price")
  profitMargin        Int       @map("profit_margin")
  totalPrice          Int       @map("total_price")
  description         String?
  imageUrl            String?   @map("image_url")
  
  // Core Components
  processor           String
  motherboard         String
  ram                 String
  storage             String
  gpu                 String?
  casePsu             String    @map("case_psu")
  
  // Peripherals (for Full Set builds)
  monitor             String?
  keyboardMouse       String?   @map("keyboard_mouse")
  mousePad            String?   @map("mouse_pad")
  
  // Meta fields
  stockQuantity       Int       @default(0) @map("stock_quantity")
  lowStockThreshold   Int       @default(2) @map("low_stock_threshold")
  isActive            Boolean   @default(true) @map("is_active")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  components          Component[]
  stockMovements      StockMovement[]
  stockAlerts         StockAlert[]
  savedBuilds         SavedBuild[]

  @@map("pc_builds")
}

model Component {
  id                  Int       @id @default(autoincrement())
  buildId             Int       @map("build_id")
  name                String
  specification       String
  price               String
  type                String
  stockQuantity       Int       @default(0) @map("stock_quantity")
  lowStockThreshold   Int       @default(5) @map("low_stock_threshold")
  isActive            Boolean   @default(true) @map("is_active")
  sku                 String?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  build               PcBuild   @relation(fields: [buildId], references: [id])
  stockMovements      StockMovement[]
  stockAlerts         StockAlert[]

  @@map("components")
}

model Inquiry {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  budget      String
  useCase     String    @map("use_case")
  details     String
  status      String    @default("uncompleted")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("inquiries")
}

model StockMovement {
  id            Int       @id @default(autoincrement())
  componentId   Int?      @map("component_id")
  buildId       Int?      @map("build_id")
  movementType  String    @map("movement_type")
  quantity      Int
  reason        String?
  notes         String?
  createdBy     String?   @map("created_by")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  component     Component? @relation(fields: [componentId], references: [id])
  build         PcBuild?   @relation(fields: [buildId], references: [id])

  @@map("stock_movements")
}

model StockAlert {
  id            Int       @id @default(autoincrement())
  componentId   Int?      @map("component_id")
  buildId       Int?      @map("build_id")
  alertType     String    @map("alert_type")
  currentStock  Int       @map("current_stock")
  threshold     Int
  itemName      String    @map("item_name")
  isResolved    Boolean   @default(false) @map("is_resolved")
  createdAt     DateTime  @default(now()) @map("created_at")
  resolvedAt    DateTime? @map("resolved_at")

  // Relations
  component     Component? @relation(fields: [componentId], references: [id])
  build         PcBuild?   @relation(fields: [buildId], references: [id])

  @@map("stock_alerts")
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  uid         String    @unique
  email       String
  displayName String?   @map("display_name")
  phone       String?
  address     String?
  city        String?
  zipCode     String?   @map("zip_code")
  preferences String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  orders      Order[]
  savedBuilds SavedBuild[]
  addresses   UserAddress[]

  @@map("user_profiles")
}

model Order {
  id              Int       @id @default(autoincrement())
  userId          String    @map("user_id")
  orderNumber     String    @unique @map("order_number")
  status          String    @default("processing")
  total           Decimal   @db.Decimal(10, 2)
  items           String
  customerName    String?   @map("customer_name")
  customerEmail   String?   @map("customer_email")
  shippingAddress String?   @map("shipping_address")
  billingAddress  String?   @map("billing_address")
  paymentMethod   String?   @map("payment_method")
  trackingNumber  String?   @map("tracking_number")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user            UserProfile @relation(fields: [userId], references: [uid])

  @@map("orders")
}

model SavedBuild {
  id        Int       @id @default(autoincrement())
  userId    String    @map("user_id")
  buildId   Int       @map("build_id")
  savedAt   DateTime  @default(now()) @map("saved_at")

  // Relations
  user      UserProfile @relation(fields: [userId], references: [uid])
  build     PcBuild     @relation(fields: [buildId], references: [id])

  @@map("saved_builds")
}

model UserAddress {
  id        String      @id
  userId    String      @map("user_id")
  fullName  String      @map("full_name")
  phone     String
  address   String
  city      String
  zipCode   String      @map("zip_code")
  isDefault Boolean     @default(false) @map("is_default")
  createdAt DateTime    @default(now()) @map("created_at")

  // Relations
  user      UserProfile @relation(fields: [userId], references: [uid])

  @@map("user_addresses")
}

model AdminSetting {
  id        Int       @id @default(autoincrement())
  key       String    @unique
  value     String
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("admin_settings")
}